{"ast":null,"code":"import { enviroment } from 'src/enviroments/enviroment';\nimport { catchError, map, of, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  get user() {\n    return {\n      ...this._user\n    };\n  }\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = enviroment.baseUrl;\n  }\n  register(usname, id, pass) {\n    const URL = `${this.baseUrl}/auth/new`;\n    const body = {\n      usname,\n      id,\n      pass\n    };\n    return this.http.post(URL, body).pipe(tap(res => {\n      if (res.ok) {\n        localStorage.setItem('token', res.token);\n        this._user = {\n          id: res.id,\n          usname: res.usname\n        };\n      }\n    }), map(res => res.ok), catchError(err => of(err.error.message)));\n  }\n  login(id, pass) {\n    const URL = `${this.baseUrl}/auth`;\n    const body = {\n      id,\n      pass\n    };\n    return this.http.post(URL, body).pipe(tap(res => {\n      if (res.ok) {\n        localStorage.setItem('token', res.token);\n        this._user = {\n          id: res.id,\n          usname: res.usname\n        };\n      }\n    }), map(res => res.ok), catchError(err => of(err.error.message)));\n  }\n  validateToken() {}\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,QAAQ,4BAA4B;AAGvD,SAASC,UAAU,EAAEC,GAAG,EAAEC,EAAE,EAAEC,GAAG,QAAQ,MAAM;;;AAK/C,OAAM,MAAOC,WAAW;EAKtB,IAAIC,IAAI;IACN,OAAM;MAAC,GAAG,IAAI,CAACC;IAAK,CAAC;EACvB;EAEAC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAPhB,YAAO,GAAYT,UAAU,CAACU,OAAO;EAOL;EAExCC,QAAQ,CAACC,MAAe,EAAEC,EAAW,EAAEC,IAAa;IAClD,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,WAAW;IACtC,MAAMM,IAAI,GAAG;MAACJ,MAAM;MAAEC,EAAE;MAACC;IAAI,CAAC;IAE9B,OAAO,IAAI,CAACL,IAAI,CAACQ,IAAI,CAAeF,GAAG,EAACC,IAAI,CAAC,CAC5CE,IAAI,CACHd,GAAG,CAACe,GAAG,IAAG;MACR,IAAGA,GAAG,CAACC,EAAE,EAAC;QACRC,YAAY,CAACC,OAAO,CAAC,OAAO,EAACH,GAAG,CAACI,KAAM,CAAC;QACxC,IAAI,CAAChB,KAAK,GAAG;UACXM,EAAE,EAAEM,GAAG,CAACN,EAAG;UACXD,MAAM,EAAEO,GAAG,CAACP;SACb;;IAEL,CAAC,CAAC,EAEFV,GAAG,CAACiB,GAAG,IAAIA,GAAG,CAACC,EAAE,CAAC,EAElBnB,UAAU,CAACuB,GAAG,IAAIrB,EAAE,CAACqB,GAAG,CAACC,KAAK,CAACC,OAAO,CAAC,CAAC,CACzC;EACH;EAEAC,KAAK,CAACd,EAAU,EAAEC,IAAY;IAC5B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,OAAO;IAClC,MAAMM,IAAI,GAAG;MAACH,EAAE;MAACC;IAAI,CAAC;IAEtB,OAAO,IAAI,CAACL,IAAI,CAACQ,IAAI,CAAeF,GAAG,EAACC,IAAI,CAAC,CAC5CE,IAAI,CACHd,GAAG,CAACe,GAAG,IAAG;MACR,IAAGA,GAAG,CAACC,EAAE,EAAC;QACRC,YAAY,CAACC,OAAO,CAAC,OAAO,EAACH,GAAG,CAACI,KAAM,CAAC;QACxC,IAAI,CAAChB,KAAK,GAAG;UACXM,EAAE,EAAEM,GAAG,CAACN,EAAG;UACXD,MAAM,EAAEO,GAAG,CAACP;SACb;;IAEL,CAAC,CAAC,EAEFV,GAAG,CAACiB,GAAG,IAAIA,GAAG,CAACC,EAAE,CAAC,EAElBnB,UAAU,CAACuB,GAAG,IAAIrB,EAAE,CAACqB,GAAG,CAACC,KAAK,CAACC,OAAO,CAAC,CAAC,CACzC;EACH;EAEAE,aAAa,IAEb;;AAzDWvB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAwB,SAAXxB,WAAW;EAAAyB,YAFV;AAAM","names":["enviroment","catchError","map","of","tap","AuthService","user","_user","constructor","http","baseUrl","register","usname","id","pass","URL","body","post","pipe","res","ok","localStorage","setItem","token","err","error","message","login","validateToken","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\edwin\\OneDrive\\Documentos\\GitHub\\LogApp-Gen-2-2023-CDIS-UANL\\LogApp-Gen-2-2023-CDIS-UANL\\src\\app\\auth\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { enviroment } from 'src/enviroments/enviroment';\r\nimport { user } from '../interfaces/us-interface';\r\nimport { AuthResponse } from '../interfaces/res-interface';\r\nimport { catchError, map, of, tap } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  private baseUrl : string = enviroment.baseUrl;\r\n  private _user! : user;\r\n\r\n  get user(){\r\n    return{...this._user}\r\n  }\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  register(usname : string, id : string, pass : string ) {\r\n    const URL = `${this.baseUrl}/auth/new` ;\r\n    const body = {usname, id,pass};\r\n\r\n    return this.http.post<AuthResponse>(URL,body)\r\n    .pipe(\r\n      tap(res =>{\r\n        if(res.ok){\r\n          localStorage.setItem('token',res.token!)\r\n          this._user = {\r\n            id: res.id!,\r\n            usname: res.usname!\r\n          }\r\n        }\r\n      }),\r\n\r\n      map(res => res.ok),\r\n\r\n      catchError(err => of(err.error.message))\r\n    )\r\n  }\r\n  \r\n  login(id: string, pass: string){\r\n    const URL = `${this.baseUrl}/auth` ;\r\n    const body = {id,pass};\r\n\r\n    return this.http.post<AuthResponse>(URL,body)\r\n    .pipe(\r\n      tap(res =>{\r\n        if(res.ok){\r\n          localStorage.setItem('token',res.token!)\r\n          this._user = {\r\n            id: res.id!,\r\n            usname: res.usname!\r\n          }\r\n        }\r\n      }),\r\n\r\n      map(res => res.ok),\r\n\r\n      catchError(err => of(err.error.message))\r\n    )\r\n  }\r\n  \r\n  validateToken(){\r\n\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}